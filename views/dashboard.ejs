<!DOCTYPE html>
<html>

<head>
    <title>US Map</title>
    <link rel="stylesheet" href="/stylesheets/map.css">
    <link rel="stylesheet" href="/stylesheets/dashboard.css">
    <script src="/javascripts/raphael.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script>
    <script src="/javascripts/color.jquery.js"></script>
    <script src="/javascripts/jquery.usmap.js"></script>
    <script src="/javascripts/domModify.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js" charset="utf-8"></script>
    <link href="/stylesheets/nv.d3.min.css">
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400, 700" rel="stylesheet">

    <script src="/stylesheets/nv.d3.min.js"></script>
</head>

<body>
<% include header %>

<div>
    <div><span class="state">Dashboard</span></div>
</div>
<div>
    <div style="width: 60%; display: inline-block">
        <span class="Charttitle">Eviction analysis for US</span>
        <span id="key"></span>
        <div id="map"></div>
    </div>
    <div class="rankings" style="width: 38%; display: inline-block; vertical-align: top;">
        <div class="stateTitle">
            <div>State analysis</div>
            <div class="circle">#<%= stateData.rank %></div>
            <div class="state"><%= state %></div>
            <div class="evictionData">
                <div class="evictionRate"> <%= stateData.evictionRate%></div>
            </div>
        </div>
        <div id="graphic" class="graphic"></div>
    </div>
</div>
<div>
    <div style="width: 60%; display: inline-block">
        <span class="Charttitle">Eviction analysis for US</span>
        <div id="multiLinechart"></div>
    </div>
    <div class="rankings" style="width: 28%; display: inline-block">
        <div id="graphic" class="graphic"></div>
    </div>
</div>
<div>
    <div style="display: inline-block; width: 30%">
        <span class="Charttitle">Rent Burden Rate analysis for 2000 to 2016</span>
        <div id="rentline">
            <svg width="400" height="250"></svg>
        </div>
    </div>
    <div style="display: inline-block; width: 30%">
        <span class="Charttitle">Number of evictions analysis from 2000 to 2016</span>
        <div id="line">
            <svg width="400" height="250"></svg>
        </div>
    </div>
</div>
<!--table>
        <tr>
            <td>
                <span class="Charttitle">Eviction analysis for US</span>
                <span id="key"></span>
                <div id="map"></div>
            </td>
            <td>
                <span class="Charttitle" style="margin-top: -84px; margin-bottom: 78px;">Number of evictions analysis from 2000 to 2016</span>
                <div id="line"><svg width="600" height="400"></svg></div>
            </td>
        </tr>
        <tr>
            <td>
                <span class="Charttitle">Rent Burden Rate analysis for 2000 to 2016</span>
                <div id="rentline"><svg width="600" height="400"></svg></div>
            </td>
            <td><span style="margin-top: -41px; margin-bottom: 60px;" class="Charttitle">Above and below poverty line analysis from 2000 and 2016</span>
                <div class="legendPie">
                    <span class="AP"></span><span>Above poverty</span>
                    <span class="BP"></span><span>Below poverty</span>
                </div>
                <div style="margin-left: 140px" id="piechart">
                </div>

            </td>
        </tr>
    </table-->
<script>
    var selectedState;
    selectedState = <%- JSON.stringify(state) %>;
    var mapDataForState = <%- JSON.stringify(mapData) %>;
    var yearDataForState = <%- JSON.stringify(yearData) %>;
    var yearRentData = <%- JSON.stringify(rentBurden) %>;
    var poverty = <%- JSON.stringify(poverty) %>;
    var rankingData = <%- JSON.stringify(rankings) %>;
    addMap(mapDataForState, selectedState);
    addLine(yearDataForState);
    addRentBurdenLineGraph(yearRentData);
    rankings(rankingData);
    multilineChart();

    //callPieChart(poverty);

    function addLine(data) {
        var svg = d3.select("#line svg"),
            margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 40
            },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom;

        var parseTime = d3.timeParse("%Y")
        bisectDate = d3.bisector(function (d) {
            return d.year;
        }).left;

        var x = d3.scaleTime().range([0, width]);
        var y = d3.scaleLinear().range([height, 0]);

        var line = d3.line()
            .x(function (d) {
                return x(d.year);
            })
            .y(function (d) {
                return y(d.value);
            });

        var g = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


        data.forEach(function (d) {
            d.year = parseTime(d.year);
            d.value = +d.value;
        });

        x.domain(d3.extent(data, function (d) {
            return d.year;
        }));
        y.domain([d3.min(data, function (d) {
            return d.value;
        }) / 1.005, d3.max(data, function (d) {
            return d.value;
        }) * 1.005]);

        g.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        g.append("g")
            .attr("class", "axis axis--y")
            .call(d3.axisLeft(y).ticks(6).tickFormat(function (d) {
                return parseInt(d / 1000) + "k";
            }))
            .append("text")
            .attr("class", "axis-title")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .attr("fill", "#5D6971")
            .text("Filed Evictions");

        g.append("path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);

        var focus = g.append("g")
            .attr("class", "focus")
            .style("display", "none");

        focus.append("line")
            .attr("class", "x-hover-line hover-line")
            .attr("y1", 0)
            .attr("y2", height);

        focus.append("line")
            .attr("class", "y-hover-line hover-line")
            .attr("x1", width)
            .attr("x2", width);

        focus.append("circle")
            .attr("r", 7.5);

        focus.append("text")
            .attr("x", 15)
            .attr("dy", ".31em");

        svg.append("rect")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .attr("class", "overlay")
            .attr("width", width)
            .attr("height", height)
            .on("mouseover", function () {
                focus.style("display", null);
            })
            .on("mouseout", function () {
                focus.style("display", "none");
            })
            .on("mousemove", mousemove);

        function mousemove() {
            var x0 = x.invert(d3.mouse(this)[0]),
                i = bisectDate(data, x0, 1),
                d0 = data[i - 1],
                d1 = data[i],
                d = x0 - d0.year > d1.year - x0 ? d1 : d0;
            focus.attr("transform", "translate(" + x(d.year) + "," + y(d.value) + ")");
            focus.select("text").text(function () {
                return d.value;
            });
            focus.select(".x-hover-line").attr("y2", height - y(d.value));
            focus.select(".y-hover-line").attr("x2", width + width);
        }

    }

    function addRentBurdenLineGraph(data) {
        var svg = d3.select("#rentline svg"),
            margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 40
            },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom;

        var parseTime = d3.timeParse("%Y")
        bisectDate = d3.bisector(function (d) {
            return d.year;
        }).left;

        var x = d3.scaleTime().range([0, width]);
        var y = d3.scaleLinear().range([height, 0]);

        var line = d3.line()
            .x(function (d) {
                return x(d.year);
            })
            .y(function (d) {
                return y(d.value);
            });

        var g = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


        data.forEach(function (d) {
            d.year = parseTime(d.year);
            d.value = +d.value;
        });

        x.domain(d3.extent(data, function (d) {
            return d.year;
        }));
        y.domain([d3.min(data, function (d) {
            return d.value;
        }) / 1.005, d3.max(data, function (d) {
            return d.value;
        }) * 1.005]);

        g.append("g")
            .attr("class", "axis axis--x")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        g.append("g")
            .attr("class", "axis axis--y")
            .call(d3.axisLeft(y).ticks(6).tickFormat(function (d) {
                return d + "%";
            }))
            .append("text")
            .attr("class", "axis-title")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .attr("fill", "#5D6971")
            .text("Rent Burden");

        g.append("path")
            .datum(data)
            .attr("class", "line")
            .attr("d", line);

        var focus = g.append("g")
            .attr("class", "focus")
            .style("display", "none");

        focus.append("line")
            .attr("class", "x-hover-line hover-line")
            .attr("y1", 0)
            .attr("y2", height);

        focus.append("line")
            .attr("class", "y-hover-line hover-line")
            .attr("x1", width)
            .attr("x2", width);

        focus.append("circle")
            .attr("r", 7.5);

        focus.append("text")
            .attr("x", 15)
            .attr("dy", ".31em");

        svg.append("rect")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .attr("class", "overlay")
            .attr("width", width)
            .attr("height", height)
            .on("mouseover", function () {
                focus.style("display", null);
            })
            .on("mouseout", function () {
                focus.style("display", "none");
            })
            .on("mousemove", mousemove);

        function mousemove() {
            var x0 = x.invert(d3.mouse(this)[0]),
                i = bisectDate(data, x0, 1),
                d0 = data[i - 1],
                d1 = data[i],
                d = x0 - d0.year > d1.year - x0 ? d1 : d0;
            focus.attr("transform", "translate(" + x(d.year) + "," + y(d.value) + ")");
            focus.select("text").text(function () {
                return d.value;
            });
            focus.select(".x-hover-line").attr("y2", height - y(d.value));
            focus.select(".y-hover-line").attr("x2", width + width);
        }

    }

    function addMap(data, selectedState) {

        //Width and height of map
        var width = 750;
        var height = 430;

        var lowColor = '#f9f9f9'
        var highColor = '#6f257f'

        // D3 Projection
        var projection = d3.geoAlbersUsa()
            .translate([width / 2, height / 2]) // translate to center of screen
            .scale([1000]); // scale things down so see entire US

        // Define path generator
        var path = d3.geoPath() // path generator that will convert GeoJSON to SVG paths
            .projection(projection); // tell path generator to use albersUsa projection

        //Create SVG element and append map to the SVG
        var svg = d3.select("#map")
            .append("svg")
            .attr("width", width)
            .attr("height", height);


        var dataArray = [];
        for (var d = 0; d < data.length; d++) {
            if (data[d].state != "USA") {
                dataArray.push(data[d].value != undefined ? data[d].value : 0)
            }

        }

        var minVal = d3.min(dataArray)
        var maxVal = d3.max(dataArray)
        var ramp = d3.scaleLinear().domain([minVal, maxVal]).range([lowColor, highColor])

        // Load GeoJSON data and merge with states data
        d3.json("/data/us-states.json", function (json) {

            // Loop through each state data value in the .csv file
            for (var i = 0; i < data.length; i++) {

                // Grab State Name
                var dataState = data[i].state;

                // Grab data value
                var dataValue = data[i].value != undefined ? data[i].value : 0;

                // Find the corresponding state inside the GeoJSON
                for (var j = 0; j < json.features.length; j++) {
                    var jsonState = json.features[j].properties.NAME;
                    // console.log(dataState+"  "+jsonState);
                    if (dataState == jsonState) {

                        // Copy the data value into the JSON
                        json.features[j].properties.value = dataValue;
                        break;
                    }

                }
            }

            // Bind the data to the SVG and create one path per GeoJSON feature
            svg.selectAll("path")
                .data(json.features)
                .enter()
                .append("path")
                .attr("d", path)
                .style("stroke", function (d) {
                    if (d.properties.NAME == selectedState)
                        return "#000";
                    else
                        return "#fff";
                })
                .style("stroke-width", function (d) {
                    if (d.properties.NAME == selectedState)
                        return "4";
                    else
                        return "2";
                })
                .style("fill", function (d) {
                    return ramp(d.properties.value)
                });

            // add a legend
            var w = 140,
                h = 300;

            var key = d3.select("body")
                .append("svg")
                .attr("width", w)
                .attr("height", h)
                .attr("class", "legend");

            var legend = key.append("defs")
                .append("svg:linearGradient")
                .attr("id", "gradient")
                .attr("x1", "100%")
                .attr("y1", "0%")
                .attr("x2", "100%")
                .attr("y2", "100%")
                .attr("spreadMethod", "pad");

            legend.append("stop")
                .attr("offset", "0%")
                .attr("stop-color", highColor)
                .attr("stop-opacity", 1);

            legend.append("stop")
                .attr("offset", "100%")
                .attr("stop-color", lowColor)
                .attr("stop-opacity", 1);

            key.append("rect")
                .attr("width", w - 100)
                .attr("height", h)
                .style("fill", "url(#gradient)")
                .attr("transform", "translate(0,10)");

            var y = d3.scaleLinear()
                .range([h, 0])
                .domain([minVal, maxVal]);

            var yAxis = d3.axisRight(y);

            key.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(41,10)")
                .call(yAxis)
        });

    }

    function pieChart(data) {
        var w = 300,                        //width
            h = 300,                            //height
            r = 100,                            //radius
            color = d3.scale.category20b();     //builtin range of colors

        var vis = d3.select("#piechart")
            .append("svg:svg")              //create the SVG element inside the <body>
            .data([data])                   //associate our data with the document
            .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
            .attr("height", h)
            .append("svg:g")                //make a group to hold our pie chart
            .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius

        var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
            .outerRadius(r);

        var pie = d3.layout.pie()           //this will create arc data for us given a list of values
            .value(function (d) {
                return d.value;
            });    //we must tell it out to access the value of each element in our data array

        var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
            .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
            .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
            .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
            .attr("class", "slice");    //allow us to style things in the slices (like text)

        arcs.append("svg:path")
            .attr("fill", function (d, i) {
                return color(i);
            }) //set the color for each slice to be chosen from the color function defined above
            .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

        arcs.append("svg:text")                                     //add a label to each slice
            .attr("transform", function (d) {                    //set the label's origin to the center of the arc
                //we have to make sure to set these before calling arc.centroid
                d.innerRadius = 0;
                d.outerRadius = r;
                return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
            })
            .attr("text-anchor", "middle")                          //center the text on it's origin
            .text(function (d, i) {
                return data[i].label;
            });        //get the label from our original data array

    }

    function callPieChart(poverty) {
        data = [];
        var BP = poverty[0]["poverty"];
        var AP = ( 100 - poverty[0]["poverty"]);

        data.push({"label": BP, "value": BP})
        data.push({"label": AP, "value": AP})
        pieChart(data);

        var len = poverty.length - 1;
        data1 = [];
        var BP = poverty[len]["poverty"];
        var AP = ( 100 - poverty[len]["poverty"]).toFixed(2);
        data1.push({"label": BP, "value": BP})
        data1.push({"label": AP, "value": AP})
        pieChart(data1);
    }

    function rankings(data) {
        var margin = {
            top: 20,
            right: 25,
            bottom: 5,
            left: 60
        };

        var width = 500 - margin.left - margin.right,
            height = 200 - margin.top - margin.bottom;

        var svg = d3.select("#graphic").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x = d3.scale.linear()
            .range([0, width])
            .domain([0, d3.max(data, function (d) {
                return d.case_numbers;
            })]);

        var y = d3.scale.ordinal()
            .rangeRoundBands([height, 0], .1)
            .domain(data.map(function (d) {
                return d.county;
            }));

        var bars = svg.selectAll(".bar")
            .data(data)
            .enter()
            .append("g")

        var tooltip = d3.select("#graphic")
            .append("div")
            .attr("class", "mytooltip")
            .text("custom");

        //append rects
        bars.append("rect")
            .attr("class", "bar")
            .attr("y", function (d) {
                return y(d.county);
            })
            .attr("height", 30)
            .attr("x", 0)
            .attr("width", function (d) {
                return x(d.case_numbers);
            })
            .on("mouseover", function () {
                return tooltip.style("visibility", "visible");
            })
            .on("mousemove", function (d) {
                return tooltip.style("top",
                    (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px")
                    .text("Rank: " + d.rank + "\nCounty: " + d.county + "\nCase No.: " + d.case_numbers);
            })
            .on("mouseout", function () {
                return tooltip.style("visibility", "hidden");
            });

        //add a value label to the right of each bar
        bars.append("text")
            .attr("class", "ranking_name")
            //y position of the label is halfway down the bar
            .attr("y", function (d) {
                return y(d.county) + y.rangeBand() / 2 + 4;
            })
            //x position is 3 pixels to the right of the bar
            .attr("x", function (d) {
                return 5;
            })
            .text(function (d) {
                return d.county + "   " + d.case_numbers;
            });

        bars.append("text")
            .attr("class", "ranks")
            //y position of the label is halfway down the bar
            .attr("y", function (d) {
                return y(d.county) + y.rangeBand() / 2 + 4;
            })
            //x position is 3 pixels to the right of the bar
            .attr("x", function (d) {
                return -30;
            })
            .text(function (d) {
                return d.rank;
            });
    }

    function multilineChart(){

        var margin = {top: 50, right: 200, bottom: 100, left: 125};

        var width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var svg = d3.select("#multiLinechart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var cfg = {
            strokeWidth: 10
        };

        var colour = d3.scaleOrdinal(d3.schemeCategory20);

        // Use indexOf to fade in one by one
        var highlight = ["Geology", "Mechanical Engineering", "Civil Engineering", "Aero", "Chemistry", "Physics"];

        svg.append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", width)
            .attr("height", height + cfg.strokeWidth);

        var x = d3.scaleLinear()
            .range([0, width]);

        var y = d3.scaleLinear()
            .range([0, height]);

        var voronoi = d3.voronoi()
            .x(d => x(d.year))
            .y(d => y(d.rank))
            .extent([[-margin.left / 2, -margin.top / 2], [width + margin.right / 2, height + margin.bottom / 2]]);

        var line = d3.line()
            .x(d => x(d.year))
            .y(d => y(d.rank))
// Uncomment this to use monotone curve
//     	.curve(d3.curveMonotoneX);

        d3.csv("/data/nss-ranking.csv", function(error, data) {
            if (error) throw error;

            var parsedData = [];
            data.forEach((d) => {
                var dObj = {department: d.department, ranks: []};
                for (var year in d) {
                    if (year != "department") {
                        if (d[year] != 0) {
                            dObj.ranks.push({year: +year, rank: +d[year], department: dObj});
                        }
                    }
                }
                parsedData.push(dObj);
            });


            var xTickNo = parsedData[0].ranks.length;
            x.domain(d3.extent(parsedData[0].ranks, d => d.year));

            colour.domain(data.map(d => d.department));

            // Ranks
            var ranks = 16;
            y.domain([0.5, ranks]);

            var axisMargin = 20;

            var xAxis = d3.axisBottom(x)
                .tickFormat(d3.format("d"))
                .ticks(xTickNo)
                .tickSize(0);

            var yAxis = d3.axisLeft(y)
                .ticks(ranks)
                .tickSize(0);

            var xGroup = svg.append("g");
            var xAxisElem = xGroup.append("g")
                .attr("transform", "translate(" + [0, height + axisMargin * 1.2] + ")")
                .attr("class", "x-axis")
                .call(xAxis);

            xGroup.append("g").selectAll("line")
                .data(x.ticks(xTickNo))
                .enter().append("line")
                .attr("class", "grid-line")
                .attr("y1", 0)
                .attr("y2", height + 10)
                .attr("x1", d => x(d))
                .attr("x2", d => x(d));

            var yGroup = svg.append("g");
            var yAxisElem = yGroup.append("g")
                .attr("transform", "translate(" + [-axisMargin, 0] + ")")
                .attr("class", "y-axis")
                .call(yAxis);
            yAxisElem.append("text")
                .attr("class", "y-label")
                .attr("text-anchor", "middle")
                .attr("transform", "rotate(-90) translate(" + [-height / 2, -margin.left / 3] + ")")
                .text("Intra-University Ranking");

            yGroup.append("g").selectAll("line")
                .data(y.ticks(ranks))
                .enter().append("line")
                .attr("class", "grid-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", d => y(d))
                .attr("y2", d => y(d));

            var lines = svg.append("g")
                .selectAll("path")
                .data(parsedData)
                .enter().append("path")
                .attr("class", "rank-line")
                .attr("d", function(d) { d.line = this; return line(d.ranks)})
                .attr("clip-path", "url(#clip)")
                .style("stroke", d => colour(d.department))
                .style("stroke-width", cfg.strokeWidth)
                .style("opacity", 0.1)
                .transition()
                .duration(500)
                .delay(d => (highlight.indexOf(d.department) + 1) * 500)
                .style("opacity", d => highlight.includes(d.department) ? 1 : 0.1);

            var endLabels = svg.append("g")
                .attr("class", "end-labels")
                .selectAll("text")
                .data(parsedData.filter(d => highlight.includes(d.department)))
                .enter().append("text")
                .attr("class", "end-label")
                .attr("x", d => x(d.ranks[d.ranks.length - 1].year))
                .attr("y", d => y(d.ranks[d.ranks.length - 1].rank))
                .attr("dx", 20)
                .attr("dy", cfg.strokeWidth / 2)
                .text(d => d.department)
                .style("opacity", 0)
                .transition()
                .duration(500)
                .delay(d => (highlight.indexOf(d.department) + 1) * 500)
                .style("opacity", 1);

            var endDots = svg.append("g")
                .selectAll("circle")
                .data(parsedData.filter(d => highlight.includes(d.department)))
                .enter().append("circle")
                .attr("class", "end-circle")
                .attr("cx", d => x(d.ranks[d.ranks.length - 1].year))
                .attr("cy", d => y(d.ranks[d.ranks.length - 1].rank))
                .attr("r", cfg.strokeWidth)
                .style("fill", d => colour(d.department))
                .style("opacity", 0)
                .transition()
                .duration(500)
                .delay(d => (highlight.indexOf(d.department) + 1) * 500)
                .style("opacity", 1);

            var tooltip = svg.append("g")
                .attr("transform", "translate(-100, -100)")
                .attr("class", "tooltip");
            tooltip.append("circle")
                .attr("r", cfg.strokeWidth);
            tooltip.append("text")
                .attr("class", "name")
                .attr("y", -20);

            var voronoiGroup = svg.append("g")
                .attr("class", "voronoi");

            voronoiGroup.selectAll("path")
                .data(voronoi.polygons(d3.merge(parsedData.map(d => d.ranks))))
                .enter().append("path")
                .attr("d", function(d) { return d ? "M" + d.join("L") + "Z" : null; })
                .on("mouseover", mouseover)
                .on("mouseout", mouseout);

            svg.selectAll(".rank-line")
                .each(d => highlight.includes(d.department) ? d.line.parentNode.appendChild(d.line) : 0);

            svg.select("g.end-labels").raise();

            function mouseover(d) {
                // Hide labels and dots from initial animation
                svg.selectAll(".end-label").style("opacity", 0);
                svg.selectAll(".end-circle").style("opacity", 0);

                svg.selectAll(".rank-line").style("opacity", 0.1);
                d3.select(d.data.department.line).style("opacity", 1);
                d.data.department.line.parentNode.appendChild(d.data.department.line);
                tooltip.attr("transform", "translate(" + x(d.data.year) + "," + y(d.data.rank) + ")")
                    .style("fill", colour(d.data.department.department))
                tooltip.select("text").text(d.data.department.department)
                    .attr("text-anchor", d.data.year == x.domain()[0] ? "start" : "middle")
                    .attr("dx", d.data.year == x.domain()[0] ? -10 : 0)
            }

            function mouseout(d) {
                svg.selectAll(".rank-line").style("opacity", d => highlight.includes(d.department) ? 1 : 0.1);

                svg.selectAll(".end-label").style("opacity", 1);
                svg.selectAll(".end-circle").style("opacity", 1);
                tooltip.attr("transform", "translate(-100,-100)");
            }
        });
    }
</script>


</body>

</html>