<!DOCTYPE html>
<html>

    <head>
        <title>US Map</title>
        <link rel="stylesheet" href="/stylesheets/map.css">
        <link rel="stylesheet" href="/stylesheets/dashboard.css">
        <script src="/javascripts/raphael.js"></script>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script>
        <script src="/javascripts/color.jquery.js"></script>
        <script src="/javascripts/jquery.usmap.js"></script>
        <script src="/javascripts/domModify.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js" charset="utf-8"></script>
        <link href="/stylesheets/nv.d3.min.css">
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <script src="/stylesheets/nv.d3.min.js"></script>
    </head>

    <body>
        <% include header %>

        <div>
            <div><span class="state">Analysis for <%=state%> state</span></div>
        </div>
            <table>
                <tr>
                    <td>
                        <span class="Charttitle">Eviction analysis for US</span>
                        <span id="key"></span>
                        <div id="map"></div>
                    </td>
                    <td>
                        <span class="Charttitle" style="margin-top: -84px; margin-bottom: 78px;">Number of evictions analysis from 2000 to 2016</span>
                        <div id="line"><svg width="600" height="400"></svg></div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <span class="Charttitle">Rent Burden Rate analysis for 2000 to 2016</span>
                        <div id="rentline"><svg width="600" height="400"></svg></div>
                    </td>
                    <td><span style="margin-top: -41px; margin-bottom: 60px;" class="Charttitle">Above and below poverty line analysis from 2000 and 2016</span>
                        <div class="legendPie">
                            <span class="AP"></span><span>Above poverty</span>
                            <span class="BP"></span><span>Below poverty</span>
                        </div>
                        <div style="margin-left: 140px" id="piechart">
                        </div>

                    </td>
                </tr>
            </table>
            <script>
                var mapDataForState = <%- JSON.stringify(mapData)%>
                var yearDataForState = <%- JSON.stringify(yearData)%>
                var yearRentData = <%- JSON.stringify(rentBurden)%>
                var poverty = <%- JSON.stringify(poverty)%>
                //console.log(mapDataForState);
                addMap(mapDataForState);
                // addLineGraph(yearDataForState);

                addLine(yearDataForState);

                addRentBurdenLineGraph(yearRentData)



                function addLine(data) {
                    var svg = d3.select("#line svg"),
                        margin = {
                            top: 20,
                            right: 20,
                            bottom: 30,
                            left: 40
                        },
                        width = +svg.attr("width") - margin.left - margin.right,
                        height = +svg.attr("height") - margin.top - margin.bottom;

                    var parseTime = d3.timeParse("%Y")
                    bisectDate = d3.bisector(function(d) {
                        return d.year;
                    }).left;

                    var x = d3.scaleTime().range([0, width]);
                    var y = d3.scaleLinear().range([height, 0]);

                    var line = d3.line()
                        .x(function(d) {
                            return x(d.year);
                        })
                        .y(function(d) {
                            return y(d.value);
                        });

                    var g = svg.append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


                    data.forEach(function(d) {
                        d.year = parseTime(d.year);
                        d.value = +d.value;
                    });

                    x.domain(d3.extent(data, function(d) {
                        return d.year;
                    }));
                    y.domain([d3.min(data, function(d) {
                        return d.value;
                    }) / 1.005, d3.max(data, function(d) {
                        return d.value;
                    }) * 1.005]);

                    g.append("g")
                        .attr("class", "axis axis--x")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x));

                    g.append("g")
                        .attr("class", "axis axis--y")
                        .call(d3.axisLeft(y).ticks(6).tickFormat(function(d) {
                            return parseInt(d / 1000) + "k";
                        }))
                        .append("text")
                        .attr("class", "axis-title")
                        .attr("transform", "rotate(-90)")
                        .attr("y", 6)
                        .attr("dy", ".71em")
                        .style("text-anchor", "end")
                        .attr("fill", "#5D6971")
                        .text("Filed Evictions");

                    g.append("path")
                        .datum(data)
                        .attr("class", "line")
                        .attr("d", line);

                    var focus = g.append("g")
                        .attr("class", "focus")
                        .style("display", "none");

                    focus.append("line")
                        .attr("class", "x-hover-line hover-line")
                        .attr("y1", 0)
                        .attr("y2", height);

                    focus.append("line")
                        .attr("class", "y-hover-line hover-line")
                        .attr("x1", width)
                        .attr("x2", width);

                    focus.append("circle")
                        .attr("r", 7.5);

                    focus.append("text")
                        .attr("x", 15)
                        .attr("dy", ".31em");

                    svg.append("rect")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                        .attr("class", "overlay")
                        .attr("width", width)
                        .attr("height", height)
                        .on("mouseover", function() {
                            focus.style("display", null);
                        })
                        .on("mouseout", function() {
                            focus.style("display", "none");
                        })
                        .on("mousemove", mousemove);

                    function mousemove() {
                        var x0 = x.invert(d3.mouse(this)[0]),
                            i = bisectDate(data, x0, 1),
                            d0 = data[i - 1],
                            d1 = data[i],
                            d = x0 - d0.year > d1.year - x0 ? d1 : d0;
                        focus.attr("transform", "translate(" + x(d.year) + "," + y(d.value) + ")");
                        focus.select("text").text(function() {
                            return d.value;
                        });
                        focus.select(".x-hover-line").attr("y2", height - y(d.value));
                        focus.select(".y-hover-line").attr("x2", width + width);
                    }

                }

                function addRentBurdenLineGraph(data) {
                    var svg = d3.select("#rentline svg"),
                        margin = {
                            top: 20,
                            right: 20,
                            bottom: 30,
                            left: 40
                        },
                        width = +svg.attr("width") - margin.left - margin.right,
                        height = +svg.attr("height") - margin.top - margin.bottom;

                    var parseTime = d3.timeParse("%Y")
                    bisectDate = d3.bisector(function(d) {
                        return d.year;
                    }).left;

                    var x = d3.scaleTime().range([0, width]);
                    var y = d3.scaleLinear().range([height, 0]);

                    var line = d3.line()
                        .x(function(d) {
                            return x(d.year);
                        })
                        .y(function(d) {
                            return y(d.value);
                        });

                    var g = svg.append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


                    data.forEach(function(d) {
                        d.year = parseTime(d.year);
                        d.value = +d.value;
                    });

                    x.domain(d3.extent(data, function(d) {
                        return d.year;
                    }));
                    y.domain([d3.min(data, function(d) {
                        return d.value;
                    }) / 1.005, d3.max(data, function(d) {
                        return d.value;
                    }) * 1.005]);

                    g.append("g")
                        .attr("class", "axis axis--x")
                        .attr("transform", "translate(0," + height + ")")
                        .call(d3.axisBottom(x));

                    g.append("g")
                        .attr("class", "axis axis--y")
                        .call(d3.axisLeft(y).ticks(6).tickFormat(function(d) {
                            return d + "%";
                        }))
                        .append("text")
                        .attr("class", "axis-title")
                        .attr("transform", "rotate(-90)")
                        .attr("y", 6)
                        .attr("dy", ".71em")
                        .style("text-anchor", "end")
                        .attr("fill", "#5D6971")
                        .text("Rent Burden");

                    g.append("path")
                        .datum(data)
                        .attr("class", "line")
                        .attr("d", line);

                    var focus = g.append("g")
                        .attr("class", "focus")
                        .style("display", "none");

                    focus.append("line")
                        .attr("class", "x-hover-line hover-line")
                        .attr("y1", 0)
                        .attr("y2", height);

                    focus.append("line")
                        .attr("class", "y-hover-line hover-line")
                        .attr("x1", width)
                        .attr("x2", width);

                    focus.append("circle")
                        .attr("r", 7.5);

                    focus.append("text")
                        .attr("x", 15)
                        .attr("dy", ".31em");

                    svg.append("rect")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
                        .attr("class", "overlay")
                        .attr("width", width)
                        .attr("height", height)
                        .on("mouseover", function() {
                            focus.style("display", null);
                        })
                        .on("mouseout", function() {
                            focus.style("display", "none");
                        })
                        .on("mousemove", mousemove);

                    function mousemove() {
                        var x0 = x.invert(d3.mouse(this)[0]),
                            i = bisectDate(data, x0, 1),
                            d0 = data[i - 1],
                            d1 = data[i],
                            d = x0 - d0.year > d1.year - x0 ? d1 : d0;
                        focus.attr("transform", "translate(" + x(d.year) + "," + y(d.value) + ")");
                        focus.select("text").text(function() {
                            return d.value;
                        });
                        focus.select(".x-hover-line").attr("y2", height - y(d.value));
                        focus.select(".y-hover-line").attr("x2", width + width);
                    }

                }

                function addMap(data) {

                    //Width and height of map
                    var width = 660;
                    var height = 430;

                    var lowColor = '#f9f9f9'
                    var highColor = '#bc3029'

                    // D3 Projection
                    var projection = d3.geoAlbersUsa()
                        .translate([width / 2, height / 2]) // translate to center of screen
                        .scale([1000]); // scale things down so see entire US

                    // Define path generator
                    var path = d3.geoPath() // path generator that will convert GeoJSON to SVG paths
                        .projection(projection); // tell path generator to use albersUsa projection

                    //Create SVG element and append map to the SVG
                    var svg = d3.select("#map")
                        .append("svg")
                        .attr("width", width)
                        .attr("height", height);


                    var dataArray = [];
                    for (var d = 0; d < data.length; d++) {
                        if (data[d].state != "USA") {
                            dataArray.push(data[d].value != undefined ? data[d].value : 0)
                        }

                    }

                    var minVal = d3.min(dataArray)
                    var maxVal = d3.max(dataArray)
                    var ramp = d3.scaleLinear().domain([minVal, maxVal]).range([lowColor, highColor])

                    // Load GeoJSON data and merge with states data
                    d3.json("/data/us-states.json", function(json) {

                        // Loop through each state data value in the .csv file
                        for (var i = 0; i < data.length; i++) {

                            // Grab State Name
                            var dataState = data[i].state;

                            // Grab data value
                            var dataValue = data[i].value != undefined ? data[i].value : 0;

                            // Find the corresponding state inside the GeoJSON
                            for (var j = 0; j < json.features.length; j++) {
                                var jsonState = json.features[j].properties.NAME;
                                // console.log(dataState+"  "+jsonState);
                                if (dataState == jsonState) {

                                    // Copy the data value into the JSON
                                    json.features[j].properties.value = dataValue;

                                    // Stop looking through the JSON
                                    break;
                                }
                            }
                        }

                        // Bind the data to the SVG and create one path per GeoJSON feature
                        svg.selectAll("path")
                            .data(json.features)
                            .enter()
                            .append("path")
                            .attr("d", path)
                            .style("stroke", "#fff")
                            .style("stroke-width", "1")
                            .style("fill", function(d) {
                                return ramp(d.properties.value)
                            });

                        // add a legend
                        var w = 140,
                            h = 300;

                        var key = d3.select("body")
                            .append("svg")
                            .attr("width", w)
                            .attr("height", h)
                            .attr("class", "legend");

                        var legend = key.append("defs")
                            .append("svg:linearGradient")
                            .attr("id", "gradient")
                            .attr("x1", "100%")
                            .attr("y1", "0%")
                            .attr("x2", "100%")
                            .attr("y2", "100%")
                            .attr("spreadMethod", "pad");

                        legend.append("stop")
                            .attr("offset", "0%")
                            .attr("stop-color", highColor)
                            .attr("stop-opacity", 1);

                        legend.append("stop")
                            .attr("offset", "100%")
                            .attr("stop-color", lowColor)
                            .attr("stop-opacity", 1);

                        key.append("rect")
                            .attr("width", w - 100)
                            .attr("height", h)
                            .style("fill", "url(#gradient)")
                            .attr("transform", "translate(0,10)");

                        var y = d3.scaleLinear()
                            .range([h, 0])
                            .domain([minVal, maxVal]);

                        var yAxis = d3.axisRight(y);

                        key.append("g")
                            .attr("class", "y axis")
                            .attr("transform", "translate(41,10)")
                            .call(yAxis)
                    });

                }

                function pieChart(data) {
                    var w = 300,                        //width
                        h = 300,                            //height
                        r = 100,                            //radius
                        color = d3.scale.category20b();     //builtin range of colors

                    var vis = d3.select("#piechart")
                        .append("svg:svg")              //create the SVG element inside the <body>
                        .data([data])                   //associate our data with the document
                        .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
                        .attr("height", h)
                        .append("svg:g")                //make a group to hold our pie chart
                        .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius

                    var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
                        .outerRadius(r);

                    var pie = d3.layout.pie()           //this will create arc data for us given a list of values
                        .value(function (d) {
                            return d.value;
                        });    //we must tell it out to access the value of each element in our data array

                    var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
                        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
                        .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
                        .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                        .attr("class", "slice");    //allow us to style things in the slices (like text)

                    arcs.append("svg:path")
                        .attr("fill", function (d, i) {
                            return color(i);
                        }) //set the color for each slice to be chosen from the color function defined above
                        .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

                    arcs.append("svg:text")                                     //add a label to each slice
                        .attr("transform", function (d) {                    //set the label's origin to the center of the arc
                            //we have to make sure to set these before calling arc.centroid
                            d.innerRadius = 0;
                            d.outerRadius = r;
                            return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
                        })
                        .attr("text-anchor", "middle")                          //center the text on it's origin
                        .text(function (d, i) {
                            return data[i].label;
                        });        //get the label from our original data array

                }

                data = [];
                var BP = poverty[0]["poverty"];
                var AP = ( 100 - poverty[0]["poverty"]);

                data.push({"label": BP, "value": BP})
                data.push({"label": AP, "value": AP})
                pieChart(data);

                var len = poverty.length - 1;
                data1 = [];
                var BP = poverty[len]["poverty"] ;
                var AP = ( 100 - poverty[len]["poverty"]).toFixed(2) ;
                data1.push({"label": BP, "value": BP})
                data1.push({"label": AP, "value": AP})
                pieChart(data1);
            </script>



    </body>

</html>